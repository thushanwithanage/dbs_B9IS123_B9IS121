name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:    # Add this to enable manual runs
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: "us-east-1"
  STACK_NAME: "webapp-infra"
  ECR_REPO_NAME: "webapp"

jobs:
  deploy-infrastructure:
    name: Deploy CloudFormation Stack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy-cfn
        run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides KeyPairName=${{ secrets.KEY_PAIR_NAME }}

      - name: Get stack outputs
        id: get-outputs
        run: |
          EC2_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" \
            --output text)
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='ECRRepositoryURI'].OutputValue" \
            --output text)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "EC2_SSH_HOST=ec2-user@$EC2_IP" >> $GITHUB_ENV

  build-and-push:
    name: Build & Push Docker Image
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_URI }}:${{ github.sha }} .

      - name: Push to ECR
        run: |
          docker push ${{ env.ECR_URI }}:${{ github.sha }}
          echo "IMAGE_URI=${{ env.ECR_URI }}:${{ github.sha }}" >> $GITHUB_ENV

  deploy-application:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_SSH_HOST }} << 'EOF'
          # Pull the new image
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ env.ECR_URI }}
          
          # Stop and remove old container
          docker stop webapp || true
          docker rm webapp || true
          
          # Run new container
          docker run -d \
            -p 3000:3000 \
            --name webapp \
            ${{ env.IMAGE_URI }}
          EOF

      - name: Verify deployment
        run: |
          curl -sSf http://${{ env.EC2_IP }}:3000
