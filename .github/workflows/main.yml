name: Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  ECR_REPOSITORY: python-webapp
  CONTAINER_NAME: python-app
  STACK_NAME: PythonAppStack
  CONFIG_STACK_NAME: PythonAppConfigStack

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Part 1: Infrastructure Setup
      - name: Deploy Infrastructure Stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} >/dev/null 2>&1; then
            echo "Stack exists. Updating stack..."
            aws cloudformation update-stack \
              --template-body file://infra.yml \
              --stack-name ${{ env.STACK_NAME }} \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=KeyPairName,ParameterValue=${{ secrets.KEY_PAIR_NAME }} || \
              echo "No updates"
          else
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack \
              --template-body file://infra.yml \
              --stack-name ${{ env.STACK_NAME }} \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=KeyPairName,ParameterValue=${{ secrets.KEY_PAIR_NAME }}
          fi

          aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}

      - name: Get EC2 Instance ID
        id: get-instance-id
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceId'].OutputValue" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      # Part 2: Configuration Management
      - name: Deploy Configuration Stack
        run: |
          aws cloudformation deploy \
            --template-file configure.yml \
            --stack-name ${{ env.CONFIG_STACK_NAME }} \
            --parameter-overrides EC2InstanceId=${{ steps.get-instance-id.outputs.instance_id }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for configuration to complete
        run: |
          echo "Waiting for configuration to complete..."
          # Wait for SSM agent to be ready
          until aws ssm describe-instance-information \
            --filters "Key=InstanceIds,Values=${{ steps.get-instance-id.outputs.instance_id }}" \
            --query 'InstanceInformationList[0].PingStatus' \
            --output text | grep -q "Online"; do
            sleep 10
            echo "Waiting for SSM to come online..."
          done
          
          # Verify Docker is installed
          echo "Verifying Docker installation..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.get-instance-id.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands": ["docker --version"]}' \
            --query "Command.CommandId" \
            --output text)
          
          # Wait for command to complete
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance_id }}

      # Application Deployment
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          cd ./app
          docker build -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2 instance
        run: |
          echo "Deploying application..."
          aws ssm send-command \
            --instance-ids ${{ steps.get-instance-id.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com",
                "docker stop ${{ env.CONTAINER_NAME }} || true",
                "docker rm ${{ env.CONTAINER_NAME }} || true",
                "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest",
                "docker run -d -p 3000:3000 --restart always --name ${{ env.CONTAINER_NAME }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
              ]
            }'
          
          # Wait for deployment to complete
          sleep 30

      - name: Verify deployment
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" \
            --output text)
          
          echo "Verifying application is running at: http://$PUBLIC_IP:3000"
          for i in {1..10}; do
            if curl -s --connect-timeout 5 "http://$PUBLIC_IP:3000" >/dev/null; then
              echo "Application is running successfully!"
              exit 0
            fi
            sleep 10
            echo "Attempt $i: Application not responding"
          done
          echo "Error: Application failed to start"
          exit 1