name: Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  ECR_REPOSITORY: python-webapp
  CONTAINER_NAME: python-app
  STACK_NAME: PythonAppStack
  CONFIG_STACK_NAME: PythonAppConfigStack
  MAX_RETRIES: 15
  RETRY_DELAY: 20

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Part 1: Infrastructure Setup
      - name: Deploy Infrastructure Stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} >/dev/null 2>&1; then
            echo "Stack exists. Updating stack..."
            aws cloudformation update-stack \
              --template-body file://infra.yml \
              --stack-name ${{ env.STACK_NAME }} \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=KeyPairName,ParameterValue=${{ secrets.KEY_PAIR_NAME }} || \
              echo "No updates"
          else
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack \
              --template-body file://infra.yml \
              --stack-name ${{ env.STACK_NAME }} \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=KeyPairName,ParameterValue=${{ secrets.KEY_PAIR_NAME }}
          fi

          aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}

      - name: Get EC2 Instance ID
        id: get-instance-id
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceId'].OutputValue" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      # Part 2: Configuration Management
      - name: Deploy Configuration Stack
        run: |
          aws cloudformation deploy \
            --template-file configure.yml \
            --stack-name ${{ env.CONFIG_STACK_NAME }} \
            --parameter-overrides EC2InstanceId=${{ steps.get-instance-id.outputs.instance_id }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for Docker to be ready
        run: |
          echo "Waiting for Docker installation to complete on EC2 instance..."
          
          # Wait for SSM agent to be ready first
          echo "Checking SSM agent status..."
          until aws ssm describe-instance-information \
            --filters "Key=InstanceIds,Values=${{ steps.get-instance-id.outputs.instance_id }}" \
            --query 'InstanceInformationList[0].PingStatus' \
            --output text | grep -q "Online"; do
            sleep 10
            echo "SSM agent not online yet, waiting..."
          done
          echo "SSM agent is online"

          # Verify Docker installation and service status
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt ${{ env.MAX_RETRIES }} ]; do
            echo "Attempt $((RETRY_COUNT+1)) of ${{ env.MAX_RETRIES }}: Checking Docker status..."
            
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids ${{ steps.get-instance-id.outputs.instance_id }} \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "echo \"Checking Docker installation and service status\"",
                "if ! command -v docker &>/dev/null; then",
                "   echo \"Docker command not found\"",
                "   exit 1",
                "fi",
                "if ! systemctl is-active docker &>/dev/null; then",
                "   echo \"Docker service not running\"",
                "   exit 2",
                "fi",
                "echo \"DOCKER_READY\"",
                "exit 0"
              ]}' \
              --query "Command.CommandId" \
              --output text)
            
            # Wait for command execution
            if aws ssm wait command-executed \
              --command-id $COMMAND_ID \
              --instance-id ${{ steps.get-instance-id.outputs.instance_id }}; then
              
              # Check command output
              OUTPUT=$(aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id ${{ steps.get-instance-id.outputs.instance_id }} \
                --query "StandardOutputContent" \
                --output text)
              
              STATUS=$(aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id ${{ steps.get-instance-id.outputs.instance_id }} \
                --query "Status" \
                --output text)
              
              if [[ $STATUS == "Success" && $OUTPUT == *"DOCKER_READY"* ]]; then
                echo "Docker is installed and running"
                break
              else
                echo "Docker not ready yet. Status: $STATUS, Output: $OUTPUT"
              fi
            else
              echo "Command execution failed"
            fi
            
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Waiting ${{ env.RETRY_DELAY }} seconds before next check..."
            sleep ${{ env.RETRY_DELAY }}
          done

          if [ $RETRY_COUNT -eq ${{ env.MAX_RETRIES }} ]; then
            echo "Error: Docker did not become ready after ${{ env.MAX_RETRIES }} attempts"
            exit 1
          fi

      # Application Deployment
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          echo "Building and pushing Docker image..."
          cd ./app
          docker build -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2 instance
        run: |
          echo "Deploying application to EC2..."
          aws ssm send-command \
            --instance-ids ${{ steps.get-instance-id.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com",
                "sudo docker stop ${{ env.CONTAINER_NAME }} || true",
                "sudo docker rm ${{ env.CONTAINER_NAME }} || true",
                "sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest",
                "sudo docker run -d -p 3000:3000 --restart always --name ${{ env.CONTAINER_NAME }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
              ]
            }'
          
          echo "Waiting 30 seconds for container to start..."
          sleep 30

      - name: Verify deployment
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" \
            --output text)
          
          echo "Verifying application is running at: http://$PUBLIC_IP:3000"
          for i in {1..10}; do
            if curl -s --connect-timeout 5 "http://$PUBLIC_IP:3000" >/dev/null; then
              echo "Application is running successfully!"
              exit 0
            fi
            sleep 10
            echo "Attempt $i: Application not responding yet..."
          done
          echo "Error: Application failed to start"
          exit 1