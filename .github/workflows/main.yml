name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  STACK_NAME: "webapp-infra"

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - run: |
          aws cloudformation deploy \
            --template-file infra.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides KeyPairName=${{ secrets.KEY_PAIR_NAME }}

      - name: Get EC2 IP
        id: get-ip
        run: |
          echo "EC2_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`EC2PublicIP`].OutputValue' \
            --output text)" >> $GITHUB_ENV

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          mkdir -p ~/.ssh
          ssh-keyscan ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i key.pem ec2-user@${{ env.EC2_IP }} << 'EOF'
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $(
              aws cloudformation describe-stacks \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryURI`].OutputValue' \
                --output text
            )
          docker pull $(...query ECRRepositoryURI...):${{ github.sha }}
          docker stop webapp || true
          docker rm webapp || true
          docker run -d -p 3000:3000 --name webapp $(...query ECRRepositoryURI...):${{ github.sha }}
          EOF