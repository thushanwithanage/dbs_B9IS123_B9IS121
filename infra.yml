AWSTemplateFormatVersion: "2010-09-09"
Description: "Python Flask app on EC2 with VPC, ECR, EKS, and auto-deployment"

Parameters:
  KeyPairName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "EC2 Key Pair"
    Default: "20058324_key_pair"

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Description: "Latest Amazon Linux 2 AMI"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:
  # ========================
  # 1. Networking (VPC, Subnet, etc.)
  # ========================
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "PythonApp-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "PythonApp-IGW"

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]  # Availability Zone 0
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "PythonApp-Public-Subnet"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PythonApp-RouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # ========================
  # 2. Security Group (Allow HTTP 3000 + SSH)
  # ========================
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP 3000 and SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "PythonApp-SG"

  # ========================
  # 3. IAM Role for EC2 (ECR + SSM Access)
  # ========================
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: "sts:AssumeRole"

  EC2RolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "PythonAppEC2Policy"
      Roles:
        - !Ref EC2Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2Role

  # ========================
  # 4. EC2 Instance (Auto-Deploys Python App)
  # ========================
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPairName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash
          # Install Docker
          yum update -y
          amazon-linux-extras install docker -y
          service docker start
          usermod -a -G docker ec2-user
          
          # Login to ECR and run the app
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/python-webapp:latest
          docker run -d -p 3000:3000 --restart always --name python-app ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/python-webapp:latest
      Tags:
        - Key: "Name"
          Value: "PythonApp-Instance"

  # ========================
  # 5. ECR Repository (Store Docker Images)
  # ========================
  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "python-webapp"
      ImageTagMutability: "MUTABLE"
      ImageScanningConfiguration:
        scanOnPush: true

  # ========================
  # 6. EKS Cluster and Node Group
  # ========================
  EKSClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["eks.amazonaws.com"]
            Action: "sts:AssumeRole"

  EKSClusterRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EKSClusterPolicy"
      Roles:
        - !Ref EKSClusterRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:DescribeInstances"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeRouteTables"
              - "iam:ListRoles"
              - "iam:GetRole"
              - "logs:*"
              - "eks:CreateCluster"
              - "eks:DescribeCluster"
              - "eks:ListClusters"
            Resource: "*"

  EKSCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: "PythonApp-EKS-Cluster"
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
      Version: "1.21"

  EKSNodeGroupRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: "sts:AssumeRole"

  EKSNodeGroupPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EKSNodeGroupPolicy"
      Roles:
        - !Ref EKSNodeGroupRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:DescribeInstances"
              - "eks:DescribeCluster"
              - "logs:*"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchGetImage"
            Resource: "*"

  EKSNodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets:
        - !Ref PublicSubnet
      InstanceTypes:
        - "t2.micro"
      DesiredSize: 2
      MinSize: 1
      MaxSize: 3
      NodegroupName: "PythonApp-EKS-NodeGroup"

Outputs:
  EC2PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
    Description: "Public IP to access the Python app"

  ECRRepositoryURI:
    Value: !GetAtt ECRRepository.RepositoryUri
    Description: "ECR URI to push Docker images"

  EKSClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
    Description: ""