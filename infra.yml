AWSTemplateFormatVersion: "2010-09-09"
Description: "Auto-scalable web server with secure networking (VPC, Subnets, ECR)"

Parameters:
  KeyPairName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "20058324_key_pair"

Resources:
  # 1. Networking (VPC, Subnets, Internet Gateway)
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "WebApp-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "WebApp-IGW"

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Public-Subnet"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "Public-RouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # 2. Security Group (SSH + HTTP)
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow SSH and HTTP traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "WebServer-SG"

  # 3. IAM Role for EC2 (ECR Access)
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: [!Ref EC2Role]

  # 4. EC2 Instance (Docker Ready)
  WebServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [AWSInstanceType2Arch, "t2.micro", "Arch"]]
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [!Ref WebServerSecurityGroup]
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl enable docker
          systemctl start docker
          usermod -aG docker ec2-user
      Tags:
        - Key: "Name"
          Value: "WebServer"

  # 5. ECR Repository
  AppRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "webapp"
      ImageTagMutability: "MUTABLE"
      ImageScanningConfiguration:
        ScanOnPush: true

# Mappings for AMI IDs
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: "ami-0c55b159cbfafe1f0"  # Amazon Linux 2 AMI (update for current)
    us-west-2:
      HVM64: "ami-0e5b6b6a9f3db6db8"
    # Add other regions as needed

Outputs:
  VPCID:
    Description: "VPC ID"
    Value: !Ref VPC
  PublicSubnetID:
    Description: "Public Subnet ID"
    Value: !Ref PublicSubnet
  SecurityGroupID:
    Description: "Web Server Security Group"
    Value: !Ref WebServerSecurityGroup
  EC2PublicIP:
    Description: "Web Server Public IP"
    Value: !GetAtt WebServer.PublicIp
  ECRRepositoryURI:
    Description: "ECR Repository URI"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/webapp"